--General Docker commands--
**CMD ["npm","run","dev"](when working with the nodemon in dev env)

-docker ps :this cmd is used to check for present up and running docker containers
-docker images :lists out the available images on the local machine
-docker exec -it {container name} /bin/bash or shell :this will allow you to explore the docker container directory
-docker rm image-id -f:this will force remove your container even it is up nad running
-docker volume prune (will remove all the unused volumes by a container)
-docker logs (id) -f (to look the live terminal)

****CMD for entering the Mongo Shell **
-docker exec -it "id" mongo -u -p
******************************************************************************************
--for Building the docker image--

-docker build ${directory where the project lies or the dockerfile present}
varients:
-docker build -t{prefered name to the new docker image}
*******************************************************************************************
--Running the image(Container form)--

however this command only sets the scope of the container to docker enviorment
-docker run {image-name}
-docker run -d -p${host port number}:${docker-env-port-num} --name{gives a name to this contaner} {image name}
-docker run -d -v ${pwd}:/app:ro --env-file ./.env -p3000:4000 node-app (Working with the Env variables)

***To make the file changes persistent in the docker container/image whenever you do a change to your code base
    use the Docker volumes concept to make development fast***
- docker run -d -v ${pwd}:/app -p3000:3000  node-app //-v is the key
**To not change the Node_modules or any directory when rebuilding the image after the changes just add another -v flag
  specifiing the folder you dont wanna change
- docker run -d -v ${pwd}:/app -v /app/node_modules -p3000:3000  node-app //-v is the key
- docker run -d -v ${pwd}:/app:ro  -p3000:3000   node-app(read only mode)

****************************************************************************************************************
****DOCKER-COMPOSE*******
-docker-compose  -f docker-compose.yml -f docker-compose-dev.yml up -d (working with diffrent yml files) --build
-docker network inspect  id Or the name os the running container(this will give tons of info about all the network configs inside the containers internal network)

****Docker Application Scale Unsing Nginx******
-docker-compose  -f docker-compose.yml -f docker-compose-dev.yml up -d --scale node-app=2(reqire app instances) 
 
